[{"id":"02cd179d-f0df-4b0e-a822-99f49c347d71","title":"Super Pow","description":"Compute a^b mod 1337, where a is a positive integer and b is a very large exponent given as an array of decimal digits.","difficulty":"MEDIUM","tags":["Math","Recursion","Modular Exponentiation"],"userId":"751b0ff7-acdd-440b-9c26-7559a795e6e0","examples":{"JAVA":{"input":"1\n4 3 3 8 5 2","output":"1","explanation":"1^433852 mod 1337 = 1"},"PYTHON":{"input":"2\n1 0","output":"1024","explanation":"2^10 mod 1337 = 1024"},"JAVASCRIPT":{"input":"2\n3","output":"8","explanation":"2^3 mod 1337 = 8"}},"constraints":"1 <= a <= 2^31 - 1\n1 <= b.length <= 2000\n0 <= b[i] <= 9\nb does not contain leading zeros.","hint":null,"editorial":"Let M = 1337. Define powMod(x, k) to compute x^k mod M via fast exponentiation. Initialize result = 1. For each digit d in b (in order), update:\n\n```\nresult = (powMod(result, 10) * powMod(a, d)) % M\n```\n\nAt the end, result = a^b mod M.","testCases":[{"input":"2\n3","output":"8"},{"input":"2\n1 0","output":"1024"},{"input":"1\n4 3 3 8 5 2","output":"1"}],"createdAt":"2025-06-08 10:33:16.443","updatedAt":"2025-06-08 10:33:16.443","codeSnippets":{"JAVA":"import java.util.*;\n\npublic class Main {\n    public int superPow(int a, int[] b) {\n        // Write your code here\n        return 0;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int a = sc.nextInt();\n        List<Integer> list = new ArrayList<>();\n        while (sc.hasNextInt()) list.add(sc.nextInt());\n        sc.close();\n        int[] b = list.stream().mapToInt(i -> i).toArray();\n        System.out.println(new Main().superPow(a, b));\n    }\n}","PYTHON":"from typing import List\n\nclass Solution:\n    def superPow(self, a: int, b: List[int]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == '__main__':\n    import sys\n    parts = list(map(int, sys.stdin.read().split()))\n    a, b = parts[0], parts[1:]\n    print(Solution().superPow(a, b))","JAVASCRIPT":"/**\n * @param {number} a\n * @param {number[]} b\n * @return {number}\n */\nfunction superPow(a, b) {\n  // Write your code here\n}\n\n// I/O\nconst fs = require('fs');\nconst data = fs.readFileSync(0, 'utf-8').trim().split(/\\s+/).map(Number);\nconst a = data[0];\nconst b = data.slice(1);\nconsole.log(superPow(a, b));"},"referenceSolutions":{"JAVA":"import java.util.*;\n\npublic class Main {\n    private static final int MOD = 1337;\n\n    private int modPow(int x, int n) {\n        long res = 1;\n        long base = x % MOD;\n        while (n > 0) {\n            if ((n & 1) == 1) res = (res * base) % MOD;\n            base = (base * base) % MOD;\n            n >>= 1;\n        }\n        return (int) res;\n    }\n\n    public int superPow(int a, int[] b) {\n        int result = 1;\n        for (int d : b) {\n            result = (int)((long)modPow(result, 10) * modPow(a, d) % MOD);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int a = sc.nextInt();\n        List<Integer> list = new ArrayList<>();\n        while (sc.hasNextInt()) list.add(sc.nextInt());\n        sc.close();\n        int[] b = list.stream().mapToInt(i -> i).toArray();\n        System.out.println(new Main().superPow(a, b));\n    }\n}","PYTHON":"from typing import List\n\nclass Solution:\n    MOD = 1337\n\n    def mod_pow(self, x: int, n: int) -> int:\n        res = 1\n        x %= Solution.MOD\n        while n > 0:\n            if n & 1:\n                res = (res * x) % Solution.MOD\n            x = (x * x) % Solution.MOD\n            n >>= 1\n        return res\n\n    def superPow(self, a: int, b: List[int]) -> int:\n        result = 1\n        for d in b:\n            result = (self.mod_pow(result, 10) * self.mod_pow(a, d)) % Solution.MOD\n        return result\n\nif __name__ == '__main__':\n    import sys\n    parts = list(map(int, sys.stdin.read().split()))\n    a, b = parts[0], parts[1:]\n    print(Solution().superPow(a, b))","JAVASCRIPT":"function superPow(a, b) {\n  const MOD = 1337;\n\n  function modPow(x, n) {\n    let res = 1;\n    x %= MOD;\n    while (n > 0) {\n      if (n & 1) res = (res * x) % MOD;\n      x = (x * x) % MOD;\n      n >>>= 1;\n    }\n    return res;\n  }\n\n  let result = 1;\n  for (const d of b) {\n    result = (modPow(result, 10) * modPow(a, d)) % MOD;\n  }\n  return result;\n}\n\nconst fs = require('fs');\nconst data = fs.readFileSync(0, 'utf-8').trim().split(/\\s+/).map(Number);\nconst a = data[0];\nconst b = data.slice(1);\nconsole.log(superPow(a, b));"}},{"id":"0fe3f04c-1409-4b08-8c58-90356eee1dca","title":"Add Digits","description":"Given an integer num, repeatedly add all its digits until the result has only one digit, and return it.","difficulty":"EASY","tags":["Math","Simulation","Number Theory"],"userId":"751b0ff7-acdd-440b-9c26-7559a795e6e0","examples":{"JAVA":{"input":"99","output":"9","explanation":"99 -> 9 + 9 = 18 -> 1 + 8 = 9"},"PYTHON":{"input":"0","output":"0","explanation":"Already a single digit."},"JAVASCRIPT":{"input":"38","output":"2","explanation":"38 -> 3 + 8 = 11 -> 1 + 1 = 2"}},"constraints":"0 <= num <= 2^31 - 1","hint":null,"editorial":"The problem is a classical example of computing the digital root of a number. A simple iterative approach repeatedly sums the digits until a single digit remains. However, a more optimized approach uses the formula: 1 + (num - 1) % 9 (with a special case for 0). This works due to properties of number bases and modular arithmetic.","testCases":[{"input":"38","output":"2"},{"input":"0","output":"0"},{"input":"99","output":"9"}],"createdAt":"2025-06-08 11:47:13.663","updatedAt":"2025-06-08 11:47:13.663","codeSnippets":{"JAVA":"public class Main {\n    public int addDigits(int num) {\n        // Write your code here\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        java.util.Scanner sc = new java.util.Scanner(System.in);\n        int num = sc.nextInt();\n        System.out.println(new Main().addDigits(num));\n        sc.close();\n    }\n}","PYTHON":"class Solution:\n    def addDigits(self, num: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    num = int(input())\n    print(Solution().addDigits(num))","JAVASCRIPT":"/**\n * @param {number} num\n * @return {number}\n */\nfunction addDigits(num) {\n  // Write your code here\n}\n\n// I/O\nconst fs = require('fs');\nconst input = parseInt(fs.readFileSync(0, 'utf-8').trim());\nconsole.log(addDigits(input));"},"referenceSolutions":{"JAVA":"public class Main {\n    public int addDigits(int num) {\n        if (num == 0) return 0;\n        return 1 + (num - 1) % 9;\n    }\n\n    public static void main(String[] args) {\n        java.util.Scanner sc = new java.util.Scanner(System.in);\n        int num = sc.nextInt();\n        System.out.println(new Main().addDigits(num));\n        sc.close();\n    }\n}","PYTHON":"class Solution:\n    def addDigits(self, num: int) -> int:\n        if num == 0:\n            return 0\n        return 1 + (num - 1) % 9\n\nif __name__ == \"__main__\":\n    num = int(input())\n    print(Solution().addDigits(num))","JAVASCRIPT":"/**\n * @param {number} num\n * @return {number}\n */\nfunction addDigits(num) {\n  if (num === 0) return 0;\n  return 1 + (num - 1) % 9;\n}\n\nconst fs = require('fs');\nconst input = parseInt(fs.readFileSync(0, 'utf-8').trim());\nconsole.log(addDigits(input));"}},{"id":"21f66f4a-6e40-4a81-a1f8-5a0893e2daab","title":"Min and Max in Array","description":"Given an array arr, your task is to find the minimum and maximum elements in the array. Return a Pair that contains two elements: the first one is the minimum element and the second is the maximum.","difficulty":"EASY","tags":["Array","Iteration"],"userId":"751b0ff7-acdd-440b-9c26-7559a795e6e0","examples":{"JAVA":{"input":"[56789]","output":"56789 56789","explanation":"Array has one element, so min and max are same."},"PYTHON":{"input":"[1, 345, 234, 21, 56789]","output":"1 56789","explanation":"Minimum is 1 and maximum is 56789."},"JAVASCRIPT":{"input":"[3, 2, 1, 56, 10000, 167]","output":"1 10000","explanation":"Minimum is 1 and maximum is 10000."}},"constraints":"1 <= arr.size() <= 10^5\n1 <= arr[i] <= 10^9","hint":null,"editorial":"Initialize min to Integer.MAX_VALUE and max to Integer.MIN_VALUE. Traverse the array, updating min if a smaller element is found, and max if a larger element is found. Return min and max after traversal.","testCases":[{"input":"[3, 2, 1, 56, 10000, 167]","output":"1 10000"},{"input":"[1, 345, 234, 21, 56789]","output":"1 56789"},{"input":"[56789]","output":"56789 56789"}],"createdAt":"2025-06-08 11:07:40.124","updatedAt":"2025-06-08 11:07:40.124","codeSnippets":{"JAVA":"import java.util.*;\n\npublic class Main {\n    public int[] minMax(int[] arr) {\n        // Write code here\n        return new int[]{-1, -1};\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String input = sc.nextLine().trim();\n        sc.close();\n        input = input.substring(1, input.length() - 1);\n        String[] tokens = input.split(\",\");\n        int[] arr = new int[tokens.length];\n        for (int i = 0; i < tokens.length; i++) {\n            arr[i] = Integer.parseInt(tokens[i].trim());\n        }\n        int[] result = new Main().minMax(arr);\n        System.out.println(result[0] + \" \" + result[1]);\n    }\n}","PYTHON":"from typing import List\n\nclass Solution:\n    def minMax(self, arr: List[int]) -> List[int]:\n        # Write code here\n        pass\n\nif __name__ == \"__main__\":\n    import sys, json\n    arr = json.loads(sys.stdin.read().strip())\n    print(*Solution().minMax(arr))","JAVASCRIPT":"/**\n * @param {number[]} arr\n * @return {number[]}\n */\nfunction minMax(arr) {\n    // Write code here\n}\n\nconst fs = require('fs');\nconst input = fs.readFileSync(0, 'utf-8').trim();\nconst arr = JSON.parse(input);\nconst [min, max] = minMax(arr);\nconsole.log(min, max);"},"referenceSolutions":{"JAVA":"import java.util.*;\n\npublic class Main {\n    public int[] minMax(int[] arr) {\n        int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n        for (int num : arr) {\n            if (num < min) min = num;\n            if (num > max) max = num;\n        }\n        return new int[]{min, max};\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String input = sc.nextLine().trim();\n        sc.close();\n        input = input.substring(1, input.length() - 1);\n        String[] tokens = input.split(\",\");\n        int[] arr = new int[tokens.length];\n        for (int i = 0; i < tokens.length; i++) {\n            arr[i] = Integer.parseInt(tokens[i].trim());\n        }\n        int[] result = new Main().minMax(arr);\n        System.out.println(result[0] + \" \" + result[1]);\n    }\n}","PYTHON":"from typing import List\n\nclass Solution:\n    def minMax(self, arr: List[int]) -> List[int]:\n        min_val = float('inf')\n        max_val = float('-inf')\n        for num in arr:\n            if num < min_val:\n                min_val = num\n            if num > max_val:\n                max_val = num\n        return [min_val, max_val]\n\nif __name__ == \"__main__\":\n    import sys, json\n    arr = json.loads(sys.stdin.read().strip())\n    print(*Solution().minMax(arr))","JAVASCRIPT":"/**\n * @param {number[]} arr\n * @return {number[]}\n */\nfunction minMax(arr) {\n    let min = Infinity, max = -Infinity;\n    for (let num of arr) {\n        if (num < min) min = num;\n        if (num > max) max = num;\n    }\n    return [min, max];\n}\n\nconst fs = require('fs');\nconst input = fs.readFileSync(0, 'utf-8').trim();\nconst arr = JSON.parse(input);\nconst [min, max] = minMax(arr);\nconsole.log(min, max);"}},{"id":"315d8217-8f1f-4ff4-ada7-419aff2c71ea","title":"Longest Substring Without Repeating Characters","description":"Given a string s, find the length of the longest substring without repeating characters.","difficulty":"HARD","tags":["hashing","two pointers","sliding window","strings"],"userId":"9fdc7434-0d78-4c5a-971d-aa0b30ae33c6","examples":{"PYTHON":{"input":"abcabcbb","output":"3","explanation":"The answer is 'abc', with the length of 3."},"JAVASCRIPT":{"input":"bbbbb","output":"1","explanation":"The answer is 'b', with the length of 1."}},"constraints":"1 ≤ |s| ≤ 10^5\ns consists of English letters, digits, symbols and spaces.","hint":null,"editorial":null,"testCases":[{"input":"pwwkew","output":"3"},{"input":"dvdf","output":"3"},{"input":"aab","output":"2"}],"createdAt":"2025-06-07 15:18:31.567","updatedAt":"2025-06-07 15:18:31.567","codeSnippets":{"JAVA":"import java.util.*;\n\npublic class Main {\n    public static int lengthOfLongestSubstring(String s) {\n        Map<Character, Integer> map = new HashMap<>();\n        int left = 0, maxLen = 0;\n        for (int right = 0; right < s.length(); right++) {\n            char c = s.charAt(right);\n            if (map.containsKey(c) && map.get(c) >= left) {\n                left = map.get(c) + 1;\n            }\n            map.put(c, right);\n            maxLen = Math.max(maxLen, right - left + 1);\n        }\n        return maxLen;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String s = sc.nextLine();\n        System.out.println(lengthOfLongestSubstring(s));\n    }\n}","PYTHON":"def length_of_longest_substring(s):\n    char_index = {}\n    left = 0\n    max_len = 0\n    for right in range(len(s)):\n        if s[right] in char_index and char_index[s[right]] >= left:\n            left = char_index[s[right]] + 1\n        char_index[s[right]] = right\n        max_len = max(max_len, right - left + 1)\n    return max_len\n\ns = input().strip()\nprint(length_of_longest_substring(s))","JAVASCRIPT":"function lengthOfLongestSubstring(s) {\n    let map = new Map();\n    let left = 0, maxLen = 0;\n    for (let right = 0; right < s.length; right++) {\n        if (map.has(s[right]) && map.get(s[right]) >= left) {\n            left = map.get(s[right]) + 1;\n        }\n        map.set(s[right], right);\n        maxLen = Math.max(maxLen, right - left + 1);\n    }\n    return maxLen;\n}\n\nconst fs = require('fs');\nconst input = fs.readFileSync(0, 'utf-8').trim();\nconsole.log(lengthOfLongestSubstring(input));"},"referenceSolutions":{"JAVA":"import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String s = sc.nextLine();\n        Map<Character, Integer> map = new HashMap<>();\n        int left = 0, maxLen = 0;\n        for (int right = 0; right < s.length(); right++) {\n            char c = s.charAt(right);\n            if (map.containsKey(c) && map.get(c) >= left) {\n                left = map.get(c) + 1;\n            }\n            map.put(c, right);\n            maxLen = Math.max(maxLen, right - left + 1);\n        }\n        System.out.println(maxLen);\n    }\n}","PYTHON":"s = input().strip()\nchar_index = {}\nleft = 0\nmax_len = 0\nfor right in range(len(s)):\n    if s[right] in char_index and char_index[s[right]] >= left:\n        left = char_index[s[right]] + 1\n    char_index[s[right]] = right\n    max_len = max(max_len, right - left + 1)\nprint(max_len)","JAVASCRIPT":"const fs = require('fs');\nconst s = fs.readFileSync(0, 'utf-8').trim();\nlet map = new Map();\nlet left = 0, maxLen = 0;\nfor (let right = 0; right < s.length; right++) {\n    if (map.has(s[right]) && map.get(s[right]) >= left) {\n        left = map.get(s[right]) + 1;\n    }\n    map.set(s[right], right);\n    maxLen = Math.max(maxLen, right - left + 1);\n}\nconsole.log(maxLen);"}},{"id":"3399b283-e355-4e57-9bb5-f9a0b2b3a94b","title":"Reverse String","description":"Given a string s, return the string in reverse order. For example, 'hello' should return 'olleh'.","difficulty":"EASY","tags":["strings","two-pointer","array"],"userId":"751b0ff7-acdd-440b-9c26-7559a795e6e0","examples":{"PYTHON":{"input":"hello","output":"olleh","explanation":"Characters are reversed from left to right."},"JAVASCRIPT":{"input":"world","output":"dlrow","explanation":"Characters are reversed from left to right."}},"constraints":"1 ≤ s.length ≤ 10^5\ns consists of printable ASCII characters","hint":null,"editorial":null,"testCases":[{"input":"algorithm","output":"mhtirogla"},{"input":"12345","output":"54321"},{"input":"a","output":"a"}],"createdAt":"2025-06-08 07:18:50.122","updatedAt":"2025-06-08 07:18:50.122","codeSnippets":{"JAVA":"import java.util.Scanner;\n\npublic class Main {\n    public static String reverseString(String s) {\n        // Write your code here\n        // Return the reversed string\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String s = sc.nextLine();\n        System.out.println(reverseString(s));\n    }\n}","PYTHON":"def reverse_string(s):\n    # Write your code here\n    # Return the reversed string\n    pass\n\nimport sys\ninput_string = sys.stdin.read().strip()\nprint(reverse_string(input_string))","JAVASCRIPT":"const fs = require('fs');\n\nfunction reverseString(s) {\n    // Write your code here\n    // Return the reversed string\n}\n\n// Reading input from stdin\nconst input = fs.readFileSync(0, 'utf-8').trim();\nconsole.log(reverseString(input));"},"referenceSolutions":{"JAVA":"import java.util.Scanner;\n\npublic class Main {\n    public static String reverseString(String s) {\n        return new StringBuilder(s).reverse().toString();\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String s = sc.nextLine();\n        System.out.println(reverseString(s));\n    }\n}","PYTHON":"def reverse_string(s):\n    return s[::-1]\n\nimport sys\ninput_string = sys.stdin.read().strip()\nprint(reverse_string(input_string))","JAVASCRIPT":"const fs = require('fs');\n\nfunction reverseString(s) {\n    return s.split('').reverse().join('');\n}\n\nconst input = fs.readFileSync(0, 'utf-8').trim();\nconsole.log(reverseString(input));"}},{"id":"3517e616-fdc5-439d-82bb-1edeec71779f","title":"Climbing Stairs","description":"You are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?","difficulty":"EASY","tags":["Dynamic Programming","Math","Memoization"],"userId":"9fdc7434-0d78-4c5a-971d-aa0b30ae33c6","examples":{"JAVA":{"input":"n = 4","output":"5","explanation":"There are five ways to climb to the top:\n1. 1 step + 1 step + 1 step + 1 step\n2. 1 step + 1 step + 2 steps\n3. 1 step + 2 steps + 1 step\n4. 2 steps + 1 step + 1 step\n5. 2 steps + 2 steps"},"PYTHON":{"input":"n = 3","output":"3","explanation":"There are three ways to climb to the top:\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step"},"JAVASCRIPT":{"input":"n = 2","output":"2","explanation":"There are two ways to climb to the top:\n1. 1 step + 1 step\n2. 2 steps"}},"constraints":"1 <= n <= 45","hint":null,"editorial":"This is a classic dynamic programming problem. The number of ways to reach the nth step is the sum of the number of ways to reach the (n-1)th step and the (n-2)th step, forming a Fibonacci-like sequence.","testCases":[{"input":"2","output":"2"},{"input":"3","output":"3"},{"input":"4","output":"5"}],"createdAt":"2025-06-07 12:28:57.87","updatedAt":"2025-06-07 12:28:57.87","codeSnippets":{"JAVA":"import java.util.Scanner;\n\nclass Main {\n  public int climbStairs(int n) {\n      // Write your code here\n      return 0;\n  }\n  \n  public static void main(String[] args) {\n      Scanner scanner = new Scanner(System.in);\n      int n = Integer.parseInt(scanner.nextLine().trim());\n      \n      // Use Main class instead of Solution\n      Main main = new Main();\n      int result = main.climbStairs(n);\n      \n      System.out.println(result);\n      scanner.close();\n  }\n}","PYTHON":"class Solution:\n  def climbStairs(self, n: int) -> int:\n      # Write your code here\n      pass\n\n# Input parsing\nif __name__ == \"__main__\":\n  import sys\n  \n  # Parse input\n  n = int(sys.stdin.readline().strip())\n  \n  # Solve\n  sol = Solution()\n  result = sol.climbStairs(n)\n  \n  # Print result\n  print(result)","JAVASCRIPT":"/**\n* @param {number} n\n* @return {number}\n*/\nfunction climbStairs(n) {\n// Write your code here\n}\n\n// Parse input and execute\nconst readline = require('readline');\nconst rl = readline.createInterface({\ninput: process.stdin,\noutput: process.stdout,\nterminal: false\n});\n\nrl.on('line', (line) => {\nconst n = parseInt(line.trim());\nconst result = climbStairs(n);\n\nconsole.log(result);\nrl.close();\n});"},"referenceSolutions":{"JAVA":"import java.util.Scanner;\n\nclass Main {\n  public int climbStairs(int n) {\n      // Base cases\n      if (n <= 2) {\n          return n;\n      }\n      \n      // Dynamic programming approach\n      int[] dp = new int[n + 1];\n      dp[1] = 1;\n      dp[2] = 2;\n      \n      for (int i = 3; i <= n; i++) {\n          dp[i] = dp[i - 1] + dp[i - 2];\n      }\n      \n      return dp[n];\n      \n      /* Alternative approach with O(1) space\n      int a = 1; // ways to climb 1 step\n      int b = 2; // ways to climb 2 steps\n      \n      for (int i = 3; i <= n; i++) {\n          int temp = a + b;\n          a = b;\n          b = temp;\n      }\n      \n      return n == 1 ? a : b;\n      */\n  }\n  \n  public static void main(String[] args) {\n      Scanner scanner = new Scanner(System.in);\n      int n = Integer.parseInt(scanner.nextLine().trim());\n      \n      // Use Main class instead of Solution\n      Main main = new Main();\n      int result = main.climbStairs(n);\n      \n      System.out.println(result);\n      scanner.close();\n  }\n}","PYTHON":"class Solution:\n  def climbStairs(self, n: int) -> int:\n      # Base cases\n      if n <= 2:\n          return n\n      \n      # Dynamic programming approach\n      dp = [0] * (n + 1)\n      dp[1] = 1\n      dp[2] = 2\n      \n      for i in range(3, n + 1):\n          dp[i] = dp[i - 1] + dp[i - 2]\n      \n      return dp[n]\n      \n      # Alternative approach with O(1) space\n      # a, b = 1, 2\n      # \n      # for i in range(3, n + 1):\n      #     a, b = b, a + b\n      # \n      # return a if n == 1 else b\n\n# Input parsing\nif __name__ == \"__main__\":\n  import sys\n  \n  # Parse input\n  n = int(sys.stdin.readline().strip())\n  \n  # Solve\n  sol = Solution()\n  result = sol.climbStairs(n)\n  \n  # Print result\n  print(result)","JAVASCRIPT":"/**\n* @param {number} n\n* @return {number}\n*/\nfunction climbStairs(n) {\n// Base cases\nif (n <= 2) {\n  return n;\n}\n\n// Dynamic programming approach\nlet dp = new Array(n + 1);\ndp[1] = 1;\ndp[2] = 2;\n\nfor (let i = 3; i <= n; i++) {\n  dp[i] = dp[i - 1] + dp[i - 2];\n}\n\nreturn dp[n];\n\n/* Alternative approach with O(1) space\nlet a = 1; // ways to climb 1 step\nlet b = 2; // ways to climb 2 steps\n\nfor (let i = 3; i <= n; i++) {\n  let temp = a + b;\n  a = b;\n  b = temp;\n}\n\nreturn n === 1 ? a : b;\n*/\n}\n\n// Parse input and execute\nconst readline = require('readline');\nconst rl = readline.createInterface({\ninput: process.stdin,\noutput: process.stdout,\nterminal: false\n});\n\nrl.on('line', (line) => {\nconst n = parseInt(line.trim());\nconst result = climbStairs(n);\n\nconsole.log(result);\nrl.close();\n});"}},{"id":"3ce84c1f-05a0-47c2-83f8-cb3e0f4b597c","title":"Reverse Integer","description":"Given a 32-bit signed integer, reverse its digits. Return 0 if the reversed integer overflows.","difficulty":"EASY","tags":["Math","Overflow","String Manipulation"],"userId":"751b0ff7-acdd-440b-9c26-7559a795e6e0","examples":{"JAVA":{"input":"n = 120","output":"21","explanation":"Reversing 120 gives 21 (leading zeros are dropped)."},"PYTHON":{"input":"n = -123","output":"-321","explanation":"Reversing -123 gives -321."},"JAVASCRIPT":{"input":"n = 123","output":"321","explanation":"Reversing 123 gives 321."}},"constraints":"-2^31 <= x <= 2^31 - 1","hint":null,"editorial":"This is a simple problem that involves reversing the digits of a number. We need to handle both positive and negative numbers, and prevent overflow in the process. To do this efficiently, we must check for overflow conditions before performing any operations that might cause an overflow.","testCases":[{"input":"123","output":"321"},{"input":"-123","output":"-321"},{"input":"120","output":"21"},{"input":"0","output":"0"},{"input":"1534236469","output":"0"}],"createdAt":"2025-06-08 09:45:19.907","updatedAt":"2025-06-08 09:45:19.907","codeSnippets":{"JAVA":"import java.util.Scanner;\n\nclass Main {\n  public int reverse(int x) {\n      // Write your code here\n      return 0;\n  }\n\n  public static void main(String[] args) {\n      Scanner scanner = new Scanner(System.in);\n      int x = Integer.parseInt(scanner.nextLine().trim());\n      Main main = new Main();\n      int result = main.reverse(x);\n      System.out.println(result);\n      scanner.close();\n  }\n}","PYTHON":"class Solution:\n  def reverse(self, x: int) -> int:\n      # Write your code here\n\n# Input parsing\nif __name__ == '__main__':\n  import sys\n  # Parse input\n  n = int(sys.stdin.readline().strip())\n  # Solve\n  sol = Solution()\n  result = sol.reverse(n)\n  # Print result\n  print(result)","JAVASCRIPT":"/**\n* @param {number} n\n* @return {number}\n*/\nfunction reverse(x) {\n  // Write your code here\n}\n\nconst readline = require('readline');\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n  terminal: false\n});\n\nrl.on('line', (line) => {\n  const n = parseInt(line.trim());\n  const result = reverse(n);\n  console.log(result);\n  rl.close();\n});"},"referenceSolutions":{"JAVA":"import java.util.Scanner;\n\nclass Main {\n  public int reverse(int x) {\n      final int INT_MIN = Integer.MIN_VALUE;\n      final int INT_MAX = Integer.MAX_VALUE;\n\n      int sign = (x < 0) ? -1 : 1;\n      x = Math.abs(x);\n      int reversed = 0;\n\n      while (x != 0) {\n          int digit = x % 10;\n          x /= 10;\n\n          // Check for overflow\n          if (reversed > (INT_MAX - digit) / 10) {\n              return 0;\n          }\n          reversed = reversed * 10 + digit;\n      }\n\n      return sign * reversed;\n  }\n\n  public static void main(String[] args) {\n      Scanner scanner = new Scanner(System.in);\n      int x = Integer.parseInt(scanner.nextLine().trim());\n      Main main = new Main();\n      int result = main.reverse(x);\n      System.out.println(result);\n      scanner.close();\n  }\n}","PYTHON":"class Solution:\n  def reverse(self, x: int) -> int:\n      INT_MIN = -2**31\n      INT_MAX = 2**31 - 1\n\n      sign = -1 if x < 0 else 1\n      x = abs(x)\n      reversed = 0\n\n      while x != 0:\n          digit = x % 10\n          x //= 10\n\n          # Check for overflow\n          if reversed > (INT_MAX - digit) // 10:\n              return 0\n          reversed = reversed * 10 + digit\n\n      return sign * reversed\n\nif __name__ == '__main__':\n  import sys\n  n = int(sys.stdin.readline().strip())\n  sol = Solution()\n  result = sol.reverse(n)\n  print(result)","JAVASCRIPT":"/**\n* @param {number} n\n* @return {number}\n*/\nfunction reverse(x) {\n  const INT_MIN = -Math.pow(2, 31);\n  const INT_MAX = Math.pow(2, 31) - 1;\n\n  let sign = (x < 0) ? -1 : 1;\n  x = Math.abs(x);\n  let reversed = 0;\n\n  while (x !== 0) {\n    let digit = x % 10;\n    x = Math.floor(x / 10);\n\n    // Check for overflow\n    if (reversed > (INT_MAX - digit) / 10) {\n      return 0;\n    }\n    reversed = reversed * 10 + digit;\n  }\n\n  return sign * reversed;\n}\n\nconst readline = require('readline');\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n  terminal: false\n});\n\nrl.on('line', (line) => {\n  const n = parseInt(line.trim());\n  const result = reverse(n);\n  console.log(result);\n  rl.close();\n});"}},{"id":"469301f5-e0d7-44f5-aeaf-7a9dd6e23bdb","title":"Day Before Given Day","description":"Given two integers d and n, where d represents a day of the week as an index from 0 (Sunday) to 6 (Saturday), return the day index which is n days before d.","difficulty":"EASY","tags":["Math","Modulo","Arithmetic"],"userId":"751b0ff7-acdd-440b-9c26-7559a795e6e0","examples":{"JAVA":{"input":"0 1","output":"6","explanation":"1 day before Sunday (0) is Saturday (6)."},"PYTHON":{"input":"2 19","output":"4","explanation":"19 days before Tuesday (2) is Thursday (4)."},"JAVASCRIPT":{"input":"4 3","output":"1","explanation":"3 days before Thursday (4) is Monday (1)."}},"constraints":"0 <= d <= 6\n0 <= n","hint":null,"editorial":"To find the day n days before d, subtract n modulo 7 from d and add 7 before taking modulo 7 again to ensure non-negative result. Formula: (d - (n % 7) + 7) % 7.","testCases":[{"input":"4 3","output":"1"},{"input":"2 19","output":"4"}],"createdAt":"2025-06-08 11:05:09.427","updatedAt":"2025-06-08 11:05:09.427","codeSnippets":{"JAVA":"import java.util.*;\n\npublic class Main {\n    public int dayBefore(int d, int n) {\n        // Write your code here\n        return 0;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String[] parts = sc.nextLine().trim().split(\" \");\n        int d = Integer.parseInt(parts[0]);\n        int n = Integer.parseInt(parts[1]);\n        sc.close();\n        System.out.println(new Main().dayBefore(d, n));\n    }\n}","PYTHON":"class Solution:\n    def day_before(self, d: int, n: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    import sys\n    parts = sys.stdin.read().strip().split()\n    d = int(parts[0])\n    n = int(parts[1])\n    print(Solution().day_before(d, n))","JAVASCRIPT":"/**\n * @param {number} d\n * @param {number} n\n * @return {number}\n */\nfunction dayBefore(d, n) {\n    // Write your code here\n}\n\n// I/O\nconst fs = require('fs');\nconst input = fs.readFileSync(0, 'utf-8').trim().split(' ');\nconst d = parseInt(input[0]);\nconst n = parseInt(input[1]);\nconsole.log(dayBefore(d, n));"},"referenceSolutions":{"JAVA":"import java.util.*;\n\npublic class Main {\n    public int dayBefore(int d, int n) {\n        return (d - n % 7 + 7) % 7;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String[] parts = sc.nextLine().trim().split(\" \");\n        int d = Integer.parseInt(parts[0]);\n        int n = Integer.parseInt(parts[1]);\n        sc.close();\n        System.out.println(new Main().dayBefore(d, n));\n    }\n}","PYTHON":"class Solution:\n    def day_before(self, d: int, n: int) -> int:\n        return (d - n % 7 + 7) % 7\n\nif __name__ == \"__main__\":\n    import sys\n    parts = sys.stdin.read().strip().split()\n    d = int(parts[0])\n    n = int(parts[1])\n    print(Solution().day_before(d, n))","JAVASCRIPT":"/**\n * @param {number} d\n * @param {number} n\n * @return {number}\n */\nfunction dayBefore(d, n) {\n    return (d - n % 7 + 7) % 7;\n}\n\nconst fs = require('fs');\nconst input = fs.readFileSync(0, 'utf-8').trim().split(' ');\nconst d = parseInt(input[0]);\nconst n = parseInt(input[1]);\nconsole.log(dayBefore(d, n));"}},{"id":"610646c1-7bea-45e1-a37b-2eb8b9cada7b","title":"Count Good Triplets","description":"Given an array of integers arr, and three integers a, b and c. You need to find the number of good triplets.\n\nA triplet (arr[i], arr[j], arr[k]) is good if the following conditions are true:\n\n0 <= i < j < k < arr.length\n|arr[i] - arr[j]| <= a\n|arr[j] - arr[k]| <= b\n|arr[i] - arr[k]| <= c\n\nWhere |x| denotes the absolute value of x.","difficulty":"EASY","tags":["Array","Brute Force","Triplet"],"userId":"751b0ff7-acdd-440b-9c26-7559a795e6e0","examples":{"JAVA":{"input":"[[3,0,1,1,9,7], 7, 2, 3]","output":"4","explanation":"There are 4 valid triplets that satisfy all given conditions."},"PYTHON":{"input":"[[1,1,2,2,3], 0, 0, 1]","output":"0","explanation":"No triplet satisfies all conditions."},"JAVASCRIPT":{"input":"[[3,0,1,1,9,7], 7, 2, 3]","output":"4","explanation":"There are 4 good triplets: (3,0,1), (3,0,1), (3,1,1), (0,1,1)."}},"constraints":"3 <= arr.length <= 100\n0 <= arr[i] <= 1000\n0 <= a, b, c <= 1000","hint":null,"editorial":"To solve this problem, iterate over all possible triplets using three nested loops for indices i, j, and k such that i < j < k. For each combination, check if all three conditions hold using the absolute difference constraints. If valid, increment the count. Finally, return the count.","testCases":[{"input":"[[3,0,1,1,9,7], 7, 2, 3]","output":"4"},{"input":"[[1,1,2,2,3], 0, 0, 1]","output":"0"}],"createdAt":"2025-06-08 10:49:13.823","updatedAt":"2025-06-08 10:49:13.823","codeSnippets":{"JAVA":"import java.util.*;\n\npublic class Main {\n    public int countGoodTriplets(int[] arr, int a, int b, int c) {\n        // Write your code here\n        return 0;\n    }\n\n    public static void main(String[] args) throws Exception {\n        Scanner sc = new Scanner(System.in);\n        StringBuilder jsonInput = new StringBuilder();\n        while (sc.hasNextLine()) {\n            jsonInput.append(sc.nextLine());\n        }\n        sc.close();\n\n        String input = jsonInput.toString().trim();\n        input = input.replaceAll(\"\\\\[|\\\\]\", \"\");\n        String[] parts = input.split(\",\");\n\n        int[] arr = new int[parts.length - 3];\n        for (int i = 0; i < arr.length; i++) {\n            arr[i] = Integer.parseInt(parts[i].trim());\n        }\n\n        int a = Integer.parseInt(parts[parts.length - 3].trim());\n        int b = Integer.parseInt(parts[parts.length - 2].trim());\n        int c = Integer.parseInt(parts[parts.length - 1].trim());\n\n        System.out.println(new Main().countGoodTriplets(arr, a, b, c));\n    }\n}","PYTHON":"from typing import List\n\nclass Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    import sys, json\n    arr, a, b, c = json.loads(sys.stdin.read().strip())\n    print(Solution().countGoodTriplets(arr, a, b, c))","JAVASCRIPT":"/**\n * @param {number[]} arr\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @return {number}\n */\nfunction countGoodTriplets(arr, a, b, c) {\n  // Write your code here\n}"},"referenceSolutions":{"JAVA":"import java.util.*;\n\npublic class Main {\n    public int countGoodTriplets(int[] arr, int a, int b, int c) {\n        int count = 0;\n        int n = arr.length;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (Math.abs(arr[i] - arr[j]) <= a) {\n                    for (int k = j + 1; k < n; k++) {\n                        if (Math.abs(arr[j] - arr[k]) <= b && Math.abs(arr[i] - arr[k]) <= c) {\n                            count++;\n                        }\n                    }\n                }\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) throws Exception {\n        Scanner sc = new Scanner(System.in);\n        StringBuilder jsonInput = new StringBuilder();\n        while (sc.hasNextLine()) {\n            jsonInput.append(sc.nextLine());\n        }\n        sc.close();\n\n        String input = jsonInput.toString().trim();\n        input = input.replaceAll(\"\\\\[|\\\\]\", \"\");\n        String[] parts = input.split(\",\");\n\n        int[] arr = new int[parts.length - 3];\n        for (int i = 0; i < arr.length; i++) {\n            arr[i] = Integer.parseInt(parts[i].trim());\n        }\n\n        int a = Integer.parseInt(parts[parts.length - 3].trim());\n        int b = Integer.parseInt(parts[parts.length - 2].trim());\n        int c = Integer.parseInt(parts[parts.length - 1].trim());\n\n        System.out.println(new Main().countGoodTriplets(arr, a, b, c));\n    }\n}","PYTHON":"from typing import List\n\nclass Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n        n = len(arr)\n        for i in range(n):\n            for j in range(i + 1, n):\n                if abs(arr[i] - arr[j]) <= a:\n                    for k in range(j + 1, n):\n                        if abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n                            count += 1\n        return count\n\nif __name__ == \"__main__\":\n    import sys, json\n    arr, a, b, c = json.loads(sys.stdin.read().strip())\n    print(Solution().countGoodTriplets(arr, a, b, c))","JAVASCRIPT":"/**\n * @param {number[]} arr\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @return {number}\n */\nfunction countGoodTriplets(arr, a, b, c) {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (Math.abs(arr[i] - arr[j]) <= a) {\n        for (let k = j + 1; k < arr.length; k++) {\n          if (Math.abs(arr[j] - arr[k]) <= b && Math.abs(arr[i] - arr[k]) <= c) {\n            count++;\n          }\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconst fs = require('fs');\nconst input = fs.readFileSync(0, 'utf-8').trim();\nconst [arr, a, b, c] = JSON.parse(input);\nconsole.log(countGoodTriplets(arr, a, b, c));"}},{"id":"6e2ee333-e960-4681-ac72-185bc5eeb382","title":"Zigzag Conversion(DEMO)","description":"The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this:\n\nP   A   H   N\nA P L S I I G\nY   I   R\n\nAnd then read line by line: \"PAHNAPLSIIGYIR\".\n\nWrite the code that will take a string and convert it to this zigzag pattern given a number of rows, then return the string read line by line.","difficulty":"MEDIUM","tags":["string","simulation","demo"],"userId":"751b0ff7-acdd-440b-9c26-7559a795e6e0","examples":{"PYTHON":{"input":"PAYPALISHIRING\n3","output":"PAHNAPLSIIGYIR","explanation":"With 3 rows, the zigzag reads as PAHNAPLSIIGYIR."},"JAVASCRIPT":{"input":"PAYPALISHIRING\n4","output":"PINALSIGYAHRPI","explanation":"With 4 rows, the zigzag reads as PINALSIGYAHRPI."}},"constraints":"1 <= s.length <= 1000\n1 <= numRows <= 1000","hint":null,"editorial":null,"testCases":[{"input":"PAYPALISHIRING\n3","output":"PAHNAPLSIIGYIR"},{"input":"PAYPALISHIRING\n4","output":"PINALSIGYAHRPI"},{"input":"A\n1","output":"A"}],"createdAt":"2025-06-08 07:44:00.838","updatedAt":"2025-06-08 07:44:00.838","codeSnippets":{"JAVA":"import java.util.*;\n\npublic class Main {\n    public static String convert(String s, int numRows) {\n        if (numRows == 1 || numRows >= s.length()) return s;\n        List<Character>[] rows = new ArrayList[numRows];\n        for (int i = 0; i < numRows; i++) {\n            rows[i] = new ArrayList<>();\n        }\n        int idx = 0, direction = 1;\n        for (char c : s.toCharArray()) {\n            rows[idx].add(c);\n            if (idx == 0) direction = 1;\n            else if (idx == numRows - 1) direction = -1;\n            idx += direction;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (List<Character> row : rows) {\n            for (char c : row) {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String s = sc.nextLine();\n        int numRows = Integer.parseInt(sc.nextLine());\n        System.out.println(convert(s, numRows));\n        sc.close();\n    }\n}","PYTHON":"def convert(s, numRows):\n    if numRows == 1 or numRows >= len(s):\n        return s\n    rows = [[] for _ in range(numRows)]\n    idx, direction = 0, 1\n    for ch in s:\n        rows[idx].append(ch)\n        if idx == 0:\n            direction = 1\n        elif idx == numRows - 1:\n            direction = -1\n        idx += direction\n    return ''.join([''.join(row) for row in rows])\n\nimport sys\ninput_data = sys.stdin.read().strip().split('\\n')\ns = input_data[0]\nnumRows = int(input_data[1])\nprint(convert(s, numRows))","JAVASCRIPT":"const fs = require('fs');\n\nconst input = fs.readFileSync(0, 'utf-8').trim().split('\\n');\nconst s = input[0];\nconst numRows = parseInt(input[1], 10);\n\nfunction convert(s, numRows) {\n    if (numRows === 1 || numRows >= s.length) return s;\n    const rows = Array.from({ length: numRows }, () => []);\n    let idx = 0, direction = 1;\n    for (const ch of s) {\n        rows[idx].push(ch);\n        if (idx === 0) direction = 1;\n        else if (idx === numRows - 1) direction = -1;\n        idx += direction;\n    }\n    return rows.map(row => row.join('')).join('');\n}\n\nconsole.log(convert(s, numRows));"},"referenceSolutions":{"JAVA":"import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String s = sc.nextLine();\n        int numRows = Integer.parseInt(sc.nextLine());\n        if (numRows == 1 || numRows >= s.length()) {\n            System.out.println(s);\n            sc.close();\n            return;\n        }\n        List<Character>[] rows = new ArrayList[numRows];\n        for (int i = 0; i < numRows; i++) {\n            rows[i] = new ArrayList<>();\n        }\n        int idx = 0, direction = 1;\n        for (char c : s.toCharArray()) {\n            rows[idx].add(c);\n            if (idx == 0) direction = 1;\n            else if (idx == numRows - 1) direction = -1;\n            idx += direction;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (List<Character> row : rows) {\n            for (char c : row) {\n                sb.append(c);\n            }\n        }\n        System.out.println(sb.toString());\n        sc.close();\n    }\n}","PYTHON":"import sys\ns, numRows = sys.stdin.read().strip().split('\\n')\nnumRows = int(numRows)\nif numRows == 1 or numRows >= len(s):\n    print(s)\n    exit()\nrows = [[] for _ in range(numRows)]\nidx, direction = 0, 1\nfor ch in s:\n    rows[idx].append(ch)\n    if idx == 0:\n        direction = 1\n    elif idx == numRows - 1:\n        direction = -1\n    idx += direction\nprint(''.join([''.join(row) for row in rows]))","JAVASCRIPT":"const fs = require('fs');\nconst input = fs.readFileSync(0, 'utf-8').trim().split('\\n');\nconst s = input[0];\nconst numRows = parseInt(input[1], 10);\nif (numRows === 1 || numRows >= s.length) {\n    console.log(s);\n    process.exit(0);\n}\nconst rows = Array.from({ length: numRows }, () => []);\nlet idx = 0, direction = 1;\nfor (const ch of s) {\n    rows[idx].push(ch);\n    if (idx === 0) direction = 1;\n    else if (idx === numRows - 1) direction = -1;\n    idx += direction;\n}\nconsole.log(rows.map(row => row.join('')).join(''));"}},{"id":"7f487439-a022-4a02-a229-e6bd087e5ec2","title":"Ugly Number","description":"An ugly number is a positive integer which does not have a prime factor other than 2, 3, and 5.\nGiven an integer n, return true if n is an ugly number.","difficulty":"EASY","tags":["Math","Number Theory"],"userId":"751b0ff7-acdd-440b-9c26-7559a795e6e0","examples":{"JAVA":{"input":"1","output":"true","explanation":"1 has no prime factors."},"PYTHON":{"input":"14","output":"false","explanation":"14 includes prime factor 7."},"JAVASCRIPT":{"input":"6","output":"true","explanation":"6 = 2 × 3, only prime factors are 2 and 3."}},"constraints":"-2^31 <= n <= 2^31 - 1","hint":null,"editorial":"To determine whether a number is ugly, keep dividing it by 2, 3, and 5 until it is no longer divisible. If the remaining number is 1, then it has no other prime factors, so it is ugly. Otherwise, it has a prime factor other than 2, 3, or 5 and is not ugly.","testCases":[{"input":"6","output":"true"},{"input":"1","output":"true"},{"input":"14","output":"false"},{"input":"0","output":"false"},{"input":"-6","output":"false"}],"createdAt":"2025-06-08 11:56:15.526","updatedAt":"2025-06-08 11:56:15.526","codeSnippets":{"JAVA":"public class Main {\n    public boolean isUgly(int n) {\n        if (n <= 0) return false;\n        for (int factor : new int[]{2, 3, 5}) {\n            while (n % factor == 0) {\n                n /= factor;\n            }\n        }\n        return n == 1;\n    }\n\n    public static void main(String[] args) {\n        java.util.Scanner sc = new java.util.Scanner(System.in);\n        int n = sc.nextInt();\n        System.out.println(Boolean.toString(new Main().isUgly(n)).toLowerCase());\n        sc.close();\n    }\n}","PYTHON":"class Solution:\n    def isUgly(self, n: int) -> bool:\n        if n <= 0:\n            return False\n        for factor in [2, 3, 5]:\n            while n % factor == 0:\n                n //= factor\n        return n == 1\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(str(Solution().isUgly(n)).lower())","JAVASCRIPT":"/**\n * @param {number} n\n * @return {boolean}\n */\nfunction isUgly(n) {\n  if (n <= 0) return false;\n  for (let factor of [2, 3, 5]) {\n    while (n % factor === 0) {\n      n /= factor;\n    }\n  }\n  return n === 1;\n}\n\nconst fs = require('fs');\nconst input = parseInt(fs.readFileSync(0, 'utf-8').trim());\nconsole.log(isUgly(input).toString().toLowerCase());"},"referenceSolutions":{"JAVA":"public class Main {\n    public boolean isUgly(int n) {\n        if (n <= 0) return false;\n        for (int factor : new int[]{2, 3, 5}) {\n            while (n % factor == 0) {\n                n /= factor;\n            }\n        }\n        return n == 1;\n    }\n\n    public static void main(String[] args) {\n        java.util.Scanner sc = new java.util.Scanner(System.in);\n        int n = sc.nextInt();\n        System.out.println(Boolean.toString(new Main().isUgly(n)).toLowerCase());\n        sc.close();\n    }\n}","PYTHON":"class Solution:\n    def isUgly(self, n: int) -> bool:\n        if n <= 0:\n            return False\n        for factor in [2, 3, 5]:\n            while n % factor == 0:\n                n //= factor\n        return n == 1\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(str(Solution().isUgly(n)).lower())","JAVASCRIPT":"/**\n * @param {number} n\n * @return {boolean}\n */\nfunction isUgly(n) {\n  if (n <= 0) return false;\n  for (let factor of [2, 3, 5]) {\n    while (n % factor === 0) {\n      n /= factor;\n    }\n  }\n  return n === 1;\n}\n\nconst fs = require('fs');\nconst input = parseInt(fs.readFileSync(0, 'utf-8').trim());\nconsole.log(isUgly(input).toString().toLowerCase());"}},{"id":"89f98450-183c-428f-a8ef-b44ff51aef5b","title":"Decimal to Binary","description":"Write a program to input an integer N in decimal form, convert it into binary, and then print the result.","difficulty":"EASY","tags":["Math","Conversion"],"userId":"751b0ff7-acdd-440b-9c26-7559a795e6e0","examples":{"JAVA":{"input":"28","output":"11100","explanation":"The decimal number 28 is converted to binary which results in '11100'."},"PYTHON":{"input":"21","output":"10101","explanation":"The decimal number 21 is converted to binary which results in '10101'."},"JAVASCRIPT":{"input":"28","output":"11100","explanation":"The decimal number 28 is converted to binary which results in '11100'."}},"constraints":"1 <= N <= 10^9","hint":null,"editorial":"In this problem, we can use the built-in functions in each programming language to directly convert the decimal number to binary. This will save time and prevent errors that may occur during manual conversion.","testCases":[{"input":"28","output":"11100"},{"input":"21","output":"10101"}],"createdAt":"2025-06-08 11:31:08.333","updatedAt":"2025-06-08 11:31:08.333","codeSnippets":{"JAVA":"import java.util.Scanner;\n\npublic class Main {\n    public static String decimalToBinary(int N) {\n        return Integer.toBinaryString(N);  // Converts the integer to binary string\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int N = sc.nextInt();  // Read the input integer\n        System.out.println(decimalToBinary(N));  // Print the binary representation\n        sc.close();\n    }\n}","PYTHON":"def decimalToBinary(N: int) -> str:\n    return bin(N)[2:]  # bin() function converts to binary, remove '0b' prefix\n\nif __name__ == \"__main__\":\n    N = int(input())  # Input an integer\n    print(decimalToBinary(N))  # Output the binary representation","JAVASCRIPT":"/**\n * @param {number} N\n * @return {string}\n */\nfunction decimalToBinary(N) {\n    return N.toString(2);  // Converts the integer to binary string\n}\n\n// I/O\nconst input = require('fs').readFileSync(0, 'utf-8').trim();\nconst N = parseInt(input);\nconsole.log(decimalToBinary(N));"},"referenceSolutions":{"JAVA":"import java.util.*;\n\npublic class Main {\n    public static String decimalToBinary(int N) {\n        return Integer.toBinaryString(N);\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int N = sc.nextInt();\n        System.out.println(decimalToBinary(N));\n        sc.close();\n    }\n}","PYTHON":"def decimalToBinary(N: int) -> str:\n    return bin(N)[2:]\n\nif __name__ == \"__main__\":\n    N = int(input())\n    print(decimalToBinary(N))","JAVASCRIPT":"/**\n * @param {number} N\n * @return {string}\n */\nfunction decimalToBinary(N) {\n    return N.toString(2);  // Converts the integer to binary string\n}\n\nconst input = require('fs').readFileSync(0, 'utf-8').trim();\nconsole.log(decimalToBinary(parseInt(input)));"}},{"id":"a0024869-7003-49a2-a76a-c574e2afa86d","title":"Second Largest Element in Array","description":"Given an array of positive integers arr[], return the second largest element from the array. If the second largest element doesn't exist then return -1.\nNote: The second largest element should not be equal to the largest element.","difficulty":"EASY","tags":["Array","Sorting","Linear Scan"],"userId":"751b0ff7-acdd-440b-9c26-7559a795e6e0","examples":{"JAVA":{"input":"[10, 10, 10]","output":"-1","explanation":"All values are the same, so no second largest exists."},"PYTHON":{"input":"[10, 5, 10]","output":"5","explanation":"10 is the largest, 5 is the second largest."},"JAVASCRIPT":{"input":"[12, 35, 1, 10, 34, 1]","output":"34","explanation":"35 is the largest, 34 is the second largest."}},"constraints":"2 <= arr.length <= 10^5\n1 <= arr[i] <= 10^5","hint":null,"editorial":"We iterate through the array once, maintaining the largest (`first`) and second largest (`second`) elements. If a new number is greater than `first`, we update `second` to `first`, and `first` to the new number. If the number is less than `first` but greater than `second`, we update `second`. This ensures we find the correct second largest distinct element.","testCases":[{"input":"[12, 35, 1, 10, 34, 1]","output":"34"},{"input":"[10, 5, 10]","output":"5"},{"input":"[10, 10, 10]","output":"-1"},{"input":"[5, 1]","output":"1"}],"createdAt":"2025-06-08 10:15:03.436","updatedAt":"2025-06-08 10:15:03.436","codeSnippets":{"JAVA":"import java.util.*;\n\npublic class Main {\n    public int secondLargest(int[] arr) {\n        // Write your code here\n        return 0;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String input = sc.nextLine().trim();\n        input = input.substring(1, input.length() - 1); // remove [ and ]\n        String[] tokens = input.split(\",\");\n        int[] arr = new int[tokens.length];\n        for (int i = 0; i < tokens.length; i++) {\n            arr[i] = Integer.parseInt(tokens[i].trim());\n        }\n        System.out.println(new Main().secondLargest(arr));\n        sc.close();\n    }\n}","PYTHON":"from typing import List\n\nclass Solution:\n    def secondLargest(self, arr: List[int]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == '__main__':\n    import sys\n    import json\n    arr = json.loads(sys.stdin.read().strip())\n    sol = Solution()\n    print(sol.secondLargest(arr))","JAVASCRIPT":"/**\n * @param {number[]} arr\n * @return {number}\n */\nfunction secondLargest(arr) {\n  // Write your code here\n}\n\nconst fs = require('fs');\nconst input = fs.readFileSync(0, 'utf-8').trim();\nconst arr = JSON.parse(input);\nconst result = secondLargest(arr);\nconsole.log(result);"},"referenceSolutions":{"JAVA":"import java.util.*;\n\npublic class Main {\n    public int secondLargest(int[] arr) {\n        int first = -1, second = -1;\n        for (int num : arr) {\n            if (num > first) {\n                second = first;\n                first = num;\n            } else if (num < first && num > second) {\n                second = num;\n            }\n        }\n        return second;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String input = sc.nextLine().trim();\n        input = input.substring(1, input.length() - 1);\n        String[] tokens = input.split(\",\");\n        int[] arr = new int[tokens.length];\n        for (int i = 0; i < tokens.length; i++) {\n            arr[i] = Integer.parseInt(tokens[i].trim());\n        }\n        System.out.println(new Main().secondLargest(arr));\n        sc.close();\n    }\n}","PYTHON":"from typing import List\n\nclass Solution:\n    def secondLargest(self, arr: List[int]) -> int:\n        first = second = -1\n        for num in arr:\n            if num > first:\n                second = first\n                first = num\n            elif num < first and num > second:\n                second = num\n        return second\n\nif __name__ == '__main__':\n    import sys\n    import json\n    arr = json.loads(sys.stdin.read().strip())\n    sol = Solution()\n    print(sol.secondLargest(arr))","JAVASCRIPT":"/**\n * @param {number[]} arr\n * @return {number}\n */\nfunction secondLargest(arr) {\n  let first = -1, second = -1;\n  for (let num of arr) {\n    if (num > first) {\n      second = first;\n      first = num;\n    } else if (num < first && num > second) {\n      second = num;\n    }\n  }\n  return second;\n}\n\nconst fs = require('fs');\nconst input = fs.readFileSync(0, 'utf-8').trim();\nconst arr = JSON.parse(input);\nconst result = secondLargest(arr);\nconsole.log(result);"}},{"id":"a0ad72b0-7e12-436f-a9c7-8975e2a1d5e8","title":"Equilibrium Point","description":"Given an array of integers arr[], the task is to find the first equilibrium point in the array. The equilibrium point is an index (0-based) such that the sum of elements before it equals the sum of elements after it. Return -1 if no such point exists.","difficulty":"EASY","tags":["Array","Prefix Sum","Two Pointers"],"userId":"751b0ff7-acdd-440b-9c26-7559a795e6e0","examples":{"JAVA":{"input":"[-7, 1, 5, 2, -4, 3, 0]","output":"3","explanation":"Left sum before index 3 is -7+1+5=-1, right sum after is -4+3+0=-1."},"PYTHON":{"input":"[1, 1, 1, 1]","output":"-1","explanation":"No index where left and right sums match."},"JAVASCRIPT":{"input":"[1, 2, 0, 3]","output":"2","explanation":"Left sum before index 2 is 1+2=3, right sum after is 3."}},"constraints":"3 <= arr.length <= 10^5\n-10^4 <= arr[i] <= 10^4","hint":null,"editorial":"First compute the total sum of all elements. Then, in one pass, maintain leftSum initialized to 0. At each index i, subtract arr[i] from total so that total now represents rightSum. If leftSum equals rightSum, i is the equilibrium point. Otherwise add arr[i] to leftSum and continue. If no index satisfies the condition, return -1.","testCases":[{"input":"[1, 2, 0, 3]","output":"2"},{"input":"[1, 1, 1, 1]","output":"-1"},{"input":"[-7, 1, 5, 2, -4, 3, 0]","output":"3"}],"createdAt":"2025-06-08 10:17:43.431","updatedAt":"2025-06-08 10:17:43.431","codeSnippets":{"JAVA":"import java.util.*;\n\npublic class Main {\n    public int equilibriumPoint(int[] arr) {\n        // Write your code here\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String input = sc.nextLine().trim();\n        sc.close();\n        input = input.substring(1, input.length() - 1); // remove [ and ]\n        String[] tokens = input.split(\",\");\n        int[] arr = new int[tokens.length];\n        for (int i = 0; i < tokens.length; i++) {\n            arr[i] = Integer.parseInt(tokens[i].trim());\n        }\n        System.out.println(new Main().equilibriumPoint(arr));\n    }\n}","PYTHON":"from typing import List\n\nclass Solution:\n    def equilibrium_point(self, arr: List[int]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    import sys, json\n    arr = json.loads(sys.stdin.read().strip())\n    print(Solution().equilibrium_point(arr))","JAVASCRIPT":"/**\n * @param {number[]} arr\n * @return {number}\n */\nfunction equilibriumPoint(arr) {\n  // Write your code here\n}\n\n// I/O\nconst fs = require('fs');\nconst input = fs.readFileSync(0, 'utf-8').trim();\nconst arr = JSON.parse(input);\nconsole.log(equilibriumPoint(arr));"},"referenceSolutions":{"JAVA":"import java.util.*;\n\npublic class Main {\n    public int equilibriumPoint(int[] arr) {\n        int total = 0;\n        for (int num : arr) total += num;\n        int leftSum = 0;\n        for (int i = 0; i < arr.length; i++) {\n            total -= arr[i]; // now total is rightSum\n            if (leftSum == total) return i;\n            leftSum += arr[i];\n        }\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String input = sc.nextLine().trim();\n        sc.close();\n        input = input.substring(1, input.length() - 1);\n        String[] tokens = input.split(\",\");\n        int[] arr = new int[tokens.length];\n        for (int i = 0; i < tokens.length; i++) {\n            arr[i] = Integer.parseInt(tokens[i].trim());\n        }\n        System.out.println(new Main().equilibriumPoint(arr));\n    }\n}","PYTHON":"from typing import List\n\nclass Solution:\n    def equilibrium_point(self, arr: List[int]) -> int:\n        total = sum(arr)\n        left_sum = 0\n        for i, num in enumerate(arr):\n            total -= num  # now total is right_sum\n            if left_sum == total:\n                return i\n            left_sum += num\n        return -1\n\nif __name__ == \"__main__\":\n    import sys, json\n    arr = json.loads(sys.stdin.read().strip())\n    print(Solution().equilibrium_point(arr))","JAVASCRIPT":"/**\n * @param {number[]} arr\n * @return {number}\n */\nfunction equilibriumPoint(arr) {\n  let total = arr.reduce((s, x) => s + x, 0);\n  let leftSum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    total -= arr[i]; // now total is rightSum\n    if (leftSum === total) return i;\n    leftSum += arr[i];\n  }\n  return -1;\n}\n\nconst fs = require('fs');\nconst input = fs.readFileSync(0, 'utf-8').trim();\nconst arr = JSON.parse(input);\nconsole.log(equilibriumPoint(arr));"}},{"id":"a1d05385-d0b4-47a3-a3cd-e81f6d5fe5da","title":"House Robber","description":"You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. The constraint is that adjacent houses have security systems connected and will alert the police if two adjacent houses are robbed on the same night. Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.","difficulty":"MEDIUM","tags":["Dynamic Programming","Array"],"userId":"751b0ff7-acdd-440b-9c26-7559a795e6e0","examples":{"JAVA":{"input":"[2,1,1,2]","output":"4","explanation":"Rob house 1 and 4: 2 + 2 = 4"},"PYTHON":{"input":"[2,7,9,3,1]","output":"12","explanation":"Rob houses 1, 3, 5: 2 + 9 + 1 = 12"},"JAVASCRIPT":{"input":"[1,2,3,1]","output":"4","explanation":"Rob house 1 and 3: 1 + 3 = 4"}},"constraints":"1 <= nums.length <= 100\n0 <= nums[i] <= 400","hint":null,"editorial":"Maintain a dp array where dp[i] stores the maximum money that can be robbed from the first i houses. The recurrence is: dp[i] = max(dp[i-1], dp[i-2] + nums[i]). Base cases are dp[0] = nums[0], dp[1] = max(nums[0], nums[1]).","testCases":[{"input":"[1,2,3,1]","output":"4"},{"input":"[2,7,9,3,1]","output":"12"},{"input":"[2,1,1,2]","output":"4"}],"createdAt":"2025-06-08 11:14:27.552","updatedAt":"2025-06-08 11:14:27.552","codeSnippets":{"JAVA":"import java.util.*;\n\npublic class Main {\n    public int rob(int[] nums) {\n        // Write your code here\n        return 0;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String input = sc.nextLine().trim();\n        input = input.substring(1, input.length() - 1);\n        String[] tokens = input.split(\",\");\n        int[] nums = new int[tokens.length];\n        for (int i = 0; i < tokens.length; i++) {\n            nums[i] = Integer.parseInt(tokens[i].trim());\n        }\n        System.out.println(new Main().rob(nums));\n    }\n}","PYTHON":"from typing import List\n\nclass Solution:\n    def rob(self, nums: List[int]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == \"__main__\":\n    import sys, json\n    nums = json.loads(sys.stdin.read().strip())\n    print(Solution().rob(nums))","JAVASCRIPT":"/**\n * @param {number[]} nums\n * @return {number}\n */\nfunction rob(nums) {\n  // Write your code here\n}\n\n// I/O\nconst fs = require('fs');\nconst input = fs.readFileSync(0, 'utf-8').trim();\nconst nums = JSON.parse(input);\nconsole.log(rob(nums));"},"referenceSolutions":{"JAVA":"import java.util.*;\n\npublic class Main {\n    public int rob(int[] nums) {\n        int prev = 0, curr = 0;\n        for (int num : nums) {\n            int temp = Math.max(curr, prev + num);\n            prev = curr;\n            curr = temp;\n        }\n        return curr;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String input = sc.nextLine().trim();\n        input = input.substring(1, input.length() - 1);\n        String[] tokens = input.split(\",\");\n        int[] nums = new int[tokens.length];\n        for (int i = 0; i < tokens.length; i++) {\n            nums[i] = Integer.parseInt(tokens[i].trim());\n        }\n        System.out.println(new Main().rob(nums));\n    }\n}","PYTHON":"from typing import List\n\nclass Solution:\n    def rob(self, nums: List[int]) -> int:\n        prev = curr = 0\n        for num in nums:\n            prev, curr = curr, max(curr, prev + num)\n        return curr\n\nif __name__ == \"__main__\":\n    import sys, json\n    nums = json.loads(sys.stdin.read().strip())\n    print(Solution().rob(nums))","JAVASCRIPT":"/**\n * @param {number[]} nums\n * @return {number}\n */\nfunction rob(nums) {\n  let prev = 0, curr = 0;\n  for (let num of nums) {\n    let temp = Math.max(curr, prev + num);\n    prev = curr;\n    curr = temp;\n  }\n  return curr;\n}\n\nconst fs = require('fs');\nconst input = fs.readFileSync(0, 'utf-8').trim();\nconst nums = JSON.parse(input);\nconsole.log(rob(nums));"}},{"id":"cbf0f818-1089-412c-931d-351365e33f29","title":"Longest Common Prefix","description":"Write a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string \"\".","difficulty":"EASY","tags":["strings","array","prefix"],"userId":"751b0ff7-acdd-440b-9c26-7559a795e6e0","examples":{"PYTHON":{"input":"[\"flower\",\"flow\",\"flight\"]","output":"\"fl\"","explanation":"The longest common prefix of these strings is \"fl\"."},"JAVASCRIPT":{"input":"[\"dog\",\"racecar\",\"car\"]","output":"\"\"","explanation":"There is no common prefix among the input strings."}},"constraints":"1 <= strs.length <= 200, 0 <= strs[i].length <= 200, strs[i] consists of only lowercase English letters if it is non-empty.","hint":null,"editorial":null,"testCases":[{"input":"[\"flower\",\"flow\",\"flight\"]","output":"fl"},{"input":"[\"dog\",\"racecar\",\"car\"]","output":""},{"input":"[\"interspecies\",\"interstellar\",\"interstate\"]","output":"inters"},{"input":"[\"\"]","output":""}],"createdAt":"2025-06-08 07:48:14.456","updatedAt":"2025-06-08 07:48:14.456","codeSnippets":{"JAVA":"import java.util.*;\n\npublic class Main {\n    public static String longestCommonPrefix(String[] strs) {\n        if (strs.length == 0) return \"\";\n        String prefix = strs[0];\n        for (int i = 1; i < strs.length; i++) {\n            while (!strs[i].startsWith(prefix)) {\n                prefix = prefix.substring(0, prefix.length() - 1);\n                if (prefix.isEmpty()) return \"\";\n            }\n        }\n        return prefix;\n    }\n    \n    public static String[] parseInput(String line) {\n        line = line.trim();\n        if (line.length() <= 2) return new String[0];\n        line = line.substring(1, line.length() - 1);\n        String[] parts = line.split(\",\");\n        for (int i = 0; i < parts.length; i++) {\n            parts[i] = parts[i].replaceAll(\"^\\\"|\\\"$\", \"\");\n        }\n        return parts;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String input = sc.nextLine();\n        String[] strs = parseInput(input);\n        System.out.println(longestCommonPrefix(strs));\n    }\n}","PYTHON":"class Solution:\n    def longestCommonPrefix(self, strs):\n        if not strs:\n            return \"\"\n        prefix = strs[0]\n        for s in strs[1:]:\n            while not s.startswith(prefix) and prefix:\n                prefix = prefix[:-1]\n            if not prefix:\n                return \"\"\n        return prefix\n\nimport sys\nimport ast\ninput_line = sys.stdin.read().strip()\nstrs = ast.literal_eval(input_line)\nsol = Solution()\nprint(sol.longestCommonPrefix(strs))","JAVASCRIPT":"/**\n * @param {string[]} strs\n * @return {string}\n */\nvar longestCommonPrefix = function(strs) {\n    if (strs.length === 0) return \"\";\n    let prefix = strs[0];\n    for (let i = 1; i < strs.length; i++) {\n        while (strs[i].indexOf(prefix) !== 0) {\n            prefix = prefix.substring(0, prefix.length - 1);\n            if (!prefix) return \"\";\n        }\n    }\n    return prefix;\n};\n\n// Read input from stdin\nprocess.stdin.on('data', data => {\n  let strs = JSON.parse(data.toString());\n  console.log(longestCommonPrefix(strs));\n});"},"referenceSolutions":{"JAVA":"import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String input = sc.nextLine();\n        String[] strs = parseInput(input);\n        if (strs.length == 0) {\n            System.out.println(\"\");\n            return;\n        }\n        String prefix = strs[0];\n        for (int i = 1; i < strs.length; i++) {\n            while (!strs[i].startsWith(prefix)) {\n                prefix = prefix.substring(0, prefix.length() - 1);\n                if (prefix.isEmpty()) {\n                    System.out.println(\"\");\n                    return;\n                }\n            }\n        }\n        System.out.println(prefix);\n    }\n    \n    public static String[] parseInput(String line) {\n        line = line.trim();\n        if (line.length() <= 2) return new String[0];\n        line = line.substring(1, line.length() - 1);\n        String[] parts = line.split(\",\");\n        for (int i = 0; i < parts.length; i++) {\n            parts[i] = parts[i].replaceAll(\"^\\\"|\\\"$\", \"\");\n        }\n        return parts;\n    }\n}","PYTHON":"import sys\nimport ast\ninput_line = sys.stdin.read().strip()\nstrs = ast.literal_eval(input_line)\nprefix = \"\"\nif strs:\n    prefix = strs[0]\n    for s in strs[1:]:\n        while not s.startswith(prefix) and prefix:\n            prefix = prefix[:-1]\n        if not prefix:\n            break\nprint(prefix)","JAVASCRIPT":"process.stdin.on('data', data => {\n  let strs = JSON.parse(data.toString());\n  if (strs.length === 0) {\n    console.log(\"\");\n    return;\n  }\n  let prefix = strs[0];\n  for (let i = 1; i < strs.length; i++) {\n    while (strs[i].indexOf(prefix) !== 0) {\n      prefix = prefix.substring(0, prefix.length - 1);\n      if (!prefix) {\n        console.log(\"\");\n        return;\n      }\n    }\n  }\n  console.log(prefix);\n});"}},{"id":"d34f3a88-a74c-4985-8c50-34bba8d99001","title":"Majority Element","description":"Given an array nums of size n, return the majority element. The majority element is the element that appears more than ⌊n/2⌋ times. You may assume that the majority element always exists in the array.","difficulty":"EASY","tags":["Array","Hash Table","Boyer–Moore Voting"],"userId":"751b0ff7-acdd-440b-9c26-7559a795e6e0","examples":{"JAVA":{"input":"[1]","output":"1","explanation":"Single element is majority by definition."},"PYTHON":{"input":"[2,2,1,1,1,2,2]","output":"2","explanation":"2 appears 4 times, which is more than 7/2."},"JAVASCRIPT":{"input":"[3,2,3]","output":"3","explanation":"3 appears twice, which is more than 3/2."}},"constraints":"n == nums.length\n1 <= n <= 5 * 10^4\n-10^9 <= nums[i] <= 10^9","hint":null,"editorial":"The Boyer–Moore Voting Algorithm maintains a candidate and a count. Iterate through nums: when count is 0, set candidate = current element. Then if current == candidate, increment count; else decrement count. At the end, candidate is the majority element.","testCases":[{"input":"[3,2,3]","output":"3"},{"input":"[2,2,1,1,1,2,2]","output":"2"},{"input":"[1]","output":"1"},{"input":"[1,1,2]","output":"1"}],"createdAt":"2025-06-08 10:30:09.596","updatedAt":"2025-06-08 10:30:09.596","codeSnippets":{"JAVA":"import java.util.*;\n\npublic class Main {\n    public int majorityElement(int[] nums) {\n        // Write your code here\n        return 0;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String line = sc.nextLine().trim();\n        sc.close();\n        line = line.substring(1, line.length() - 1);\n        String[] parts = line.split(\",\");\n        int[] nums = new int[parts.length];\n        for (int i = 0; i < parts.length; i++) {\n            nums[i] = Integer.parseInt(parts[i].trim());\n        }\n        System.out.println(new Main().majorityElement(nums));\n    }\n}","PYTHON":"from typing import List\n\nclass Solution:\n    def majorityElement(self, nums: List[int]) -> int:\n        # Write your code here\n        pass\n\nif __name__ == '__main__':\n    import sys, json\n    nums = json.loads(sys.stdin.read().strip())\n    print(Solution().majorityElement(nums))","JAVASCRIPT":"/**\n * @param {number[]} nums\n * @return {number}\n */\nfunction majorityElement(nums) {\n  // Write your code here\n}\n\nconst fs = require('fs');\nconst nums = JSON.parse(fs.readFileSync(0, 'utf-8').trim());\nconsole.log(majorityElement(nums));"},"referenceSolutions":{"JAVA":"import java.util.*;\n\npublic class Main {\n    public int majorityElement(int[] nums) {\n        int count = 0, candidate = 0;\n        for (int num : nums) {\n            if (count == 0) candidate = num;\n            count += (num == candidate) ? 1 : -1;\n        }\n        return candidate;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String line = sc.nextLine().trim();\n        sc.close();\n        line = line.substring(1, line.length() - 1);\n        String[] parts = line.split(\",\");\n        int[] nums = new int[parts.length];\n        for (int i = 0; i < parts.length; i++) {\n            nums[i] = Integer.parseInt(parts[i].trim());\n        }\n        System.out.println(new Main().majorityElement(nums));\n    }\n}","PYTHON":"from typing import List\n\nclass Solution:\n    def majorityElement(self, nums: List[int]) -> int:\n        count = 0\n        candidate = None\n        for num in nums:\n            if count == 0:\n                candidate = num\n            count += 1 if num == candidate else -1\n        return candidate\n\nif __name__ == '__main__':\n    import sys, json\n    nums = json.loads(sys.stdin.read().strip())\n    print(Solution().majorityElement(nums))","JAVASCRIPT":"/**\n * @param {number[]} nums\n * @return {number}\n */\nfunction majorityElement(nums) {\n  let count = 0, candidate = null;\n  for (const num of nums) {\n    if (count === 0) candidate = num;\n    count += (num === candidate) ? 1 : -1;\n  }\n  return candidate;\n}\n\nconst fs = require('fs');\nconst nums = JSON.parse(fs.readFileSync(0, 'utf-8').trim());\nconsole.log(majorityElement(nums));"}},{"id":"e500ae68-e084-48c8-be96-4f1e481a911b","title":"Sqrt(x)","description":"Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well.\n\nYou must not use any built-in exponent function or operator.\n\nFor example, do not use pow(x, 0.5) in C++ or x ** 0.5 in Python.","difficulty":"EASY","tags":["Math","Binary Search"],"userId":"751b0ff7-acdd-440b-9c26-7559a795e6e0","examples":{"JAVA":{"input":"4","output":"2","explanation":"Square root of 4 is 2."},"PYTHON":{"input":"8","output":"2","explanation":"Square root of 8 is 2.82842..., rounded down is 2."},"JAVASCRIPT":{"input":"4","output":"2","explanation":"Square root of 4 is 2."}},"constraints":"0 <= x <= 2^31 - 1","hint":null,"editorial":null,"testCases":[{"input":"4","output":"2"},{"input":"8","output":"2"}],"createdAt":"2025-06-08 10:51:25.916","updatedAt":"2025-06-08 10:51:25.916","codeSnippets":{"JAVA":"import java.util.*;\n\npublic class Main {\n    public int mySqrt(int x) {\n        // Write code here\n        return 0;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int x = Integer.parseInt(sc.nextLine().trim());\n        System.out.println(new Main().mySqrt(x));\n        sc.close();\n    }\n}","PYTHON":"class Solution:\n    def mySqrt(self, x: int) -> int:\n        # Write code here\n        pass\n\nif __name__ == \"__main__\":\n    import sys\n    x = int(sys.stdin.read().strip())\n    print(Solution().mySqrt(x))","JAVASCRIPT":"/**\n * @param {number} x\n * @return {number}\n */\nfunction mySqrt(x) {\n  // Write code here\n}"},"referenceSolutions":{"JAVA":"import java.util.*;\n\npublic class Main {\n    public int mySqrt(int x) {\n        if (x < 2) return x;\n        int left = 1, right = x / 2, ans = 1;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            long sq = (long)mid * mid;\n            if (sq == x) {\n                return mid;\n            } else if (sq < x) {\n                ans = mid;\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return ans;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int x = Integer.parseInt(sc.nextLine().trim());\n        System.out.println(new Main().mySqrt(x));\n        sc.close();\n    }\n}","PYTHON":"class Solution:\n    def mySqrt(self, x: int) -> int:\n        if x < 2:\n            return x\n        left, right = 1, x // 2\n        ans = 1\n        while left <= right:\n            mid = (left + right) // 2\n            if mid * mid == x:\n                return mid\n            elif mid * mid < x:\n                ans = mid\n                left = mid + 1\n            else:\n                right = mid - 1\n        return ans\n\nif __name__ == \"__main__\":\n    import sys\n    x = int(sys.stdin.read().strip())\n    print(Solution().mySqrt(x))","JAVASCRIPT":"/**\n * @param {number} x\n * @return {number}\n */\nfunction mySqrt(x) {\n  if (x < 2) return x;\n  let left = 1, right = Math.floor(x / 2), ans = 1;\n  while (left <= right) {\n    let mid = Math.floor((left + right) / 2);\n    if (mid * mid === x) {\n      return mid;\n    } else if (mid * mid < x) {\n      ans = mid;\n      left = mid + 1;\n    } else {\n      right = mid - 1;\n    }\n  }\n  return ans;\n}\n\nconst fs = require('fs');\nconst input = fs.readFileSync(0, 'utf-8').trim();\nconsole.log(mySqrt(parseInt(input)));"}},{"id":"e7fdf31b-4e1e-43b3-bb25-2be1639c4d18","title":"Add Two Numbers (DEMO)","description":"Given two numbers a and b add them up and return the outout","difficulty":"EASY","tags":["math","operators","addition"],"userId":"751b0ff7-acdd-440b-9c26-7559a795e6e0","examples":{"PYTHON":{"input":"3 7","output":"10","explanation":"Adding 3 and 7 gives 10."},"JAVASCRIPT":{"input":"-5 12","output":"7","explanation":"Adding -5 and 12 gives 7."}},"constraints":"-10^9 ≤ a, b ≤ 10^9","hint":null,"editorial":null,"testCases":[{"input":"100 200","output":"300"},{"input":"-500 -600","output":"-1100"},{"input":"0 0","output":"0"}],"createdAt":"2025-06-07 19:34:15.026","updatedAt":"2025-06-07 19:34:15.026","codeSnippets":{"JAVA":"import java.util.Scanner;\n\npublic class Main {\n    public static int addTwoNumbers(int a, int b) {\n        // Write your code here\n        // Return the sum of a and b\n        return a + b;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int a = sc.nextInt();\n        int b = sc.nextInt();\n        System.out.println(addTwoNumbers(a, b));\n    }\n}","PYTHON":"def add_two_numbers(a, b):\n    # Write your code here\n    # Return the sum of a and b\n    return a + b\n\nimport sys\ninput_line = sys.stdin.read()\na, b = map(int, input_line.split())\nprint(add_two_numbers(a, b))","JAVASCRIPT":"const fs = require('fs');\n\nfunction addTwoNumbers(a, b) {\n    // Write your code here\n    // Return the sum of a and b\n    return a + b;\n}\n\n// Reading input from stdin (using fs to read all input)\nconst input = fs.readFileSync(0, 'utf-8').trim();\nconst [a, b] = input.split(' ').map(Number);\n\nconsole.log(addTwoNumbers(a, b));"},"referenceSolutions":{"JAVA":"import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int a = sc.nextInt();\n        int b = sc.nextInt();\n        System.out.println(a + b);\n    }\n}","PYTHON":"import sys\ninput_line = sys.stdin.read()\na, b = map(int, input_line.split())\nprint(a + b)","JAVASCRIPT":"const fs = require('fs');\n\n// Reading input from stdin (using fs to read all input)\nconst input = fs.readFileSync(0, 'utf-8').trim();\nconst [a, b] = input.split(' ').map(Number);\n\nconsole.log(a + b);"}},{"id":"f2f1f1ef-a0b0-4ba2-b6f4-b2bd4cff24b2","title":"Check Palindrome String","description":"Given a string s, determine if it is a palindrome. A string is a palindrome if it reads the same forward and backward. Consider only alphanumeric characters and ignore cases.","difficulty":"EASY","tags":["string","two pointers","palindrome"],"userId":"751b0ff7-acdd-440b-9c26-7559a795e6e0","examples":{"PYTHON":{"input":"A man, a plan, a canal: Panama","output":"true","explanation":"After removing non-alphanumeric characters and converting to lowercase, the string becomes 'amanaplanacanalpanama' which is a palindrome."},"JAVASCRIPT":{"input":"race a car","output":"false","explanation":"Processed string is 'raceacar' which is not a palindrome."}},"constraints":"1 ≤ len(s) ≤ 2 * 10^5\ns consists of printable ASCII characters.","hint":null,"editorial":null,"testCases":[{"input":"Was it a car or a cat I saw?","output":"true"},{"input":"No 'x' in Nixon","output":"true"},{"input":"hello","output":"false"},{"input":" ","output":"true"}],"createdAt":"2025-06-08 07:34:26.578","updatedAt":"2025-06-08 07:34:26.578","codeSnippets":{"JAVA":"import java.util.Scanner;\n\npublic class Main {\n    public static boolean isPalindrome(String s) {\n        s = s.replaceAll(\"[^a-zA-Z0-9]\", \"\").toLowerCase();\n        int left = 0, right = s.length() - 1;\n        while (left < right) {\n            if (s.charAt(left) != s.charAt(right)) return false;\n            left++;\n            right--;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String input = sc.nextLine();\n        System.out.println(isPalindrome(input));\n    }\n}","PYTHON":"def is_palindrome(s):\n    import re\n    s = re.sub(r'[^a-zA-Z0-9]', '', s).lower()\n    return s == s[::-1]\n\nimport sys\ninput_str = sys.stdin.read().strip()\nprint(str(is_palindrome(input_str)).lower())","JAVASCRIPT":"const fs = require('fs');\n\nfunction isPalindrome(s) {\n    // Remove non-alphanumeric and lowercase\n    const cleaned = s.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n    let left = 0, right = cleaned.length - 1;\n    while (left < right) {\n        if (cleaned[left] !== cleaned[right]) return false;\n        left++;\n        right--;\n    }\n    return true;\n}\n\nconst input = fs.readFileSync(0, 'utf-8').trim();\nconsole.log(isPalindrome(input));"},"referenceSolutions":{"JAVA":"import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String s = sc.nextLine().replaceAll(\"[^a-zA-Z0-9]\", \"\").toLowerCase();\n        StringBuilder sb = new StringBuilder(s);\n        System.out.println(s.equals(sb.reverse().toString()));\n    }\n}","PYTHON":"import sys, re\ns = sys.stdin.read().strip()\ns = re.sub(r'[^a-zA-Z0-9]', '', s).lower()\nprint(str(s == s[::-1]).lower())","JAVASCRIPT":"const fs = require('fs');\nconst input = fs.readFileSync(0, 'utf-8').trim();\nconst cleaned = input.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\nconsole.log(cleaned === cleaned.split('').reverse().join(''));"}},{"id":"f8c7c6d6-ecfd-4e85-8d57-cd58b19b8180","title":"Next Greater Element","description":"Given an array, for each element, find the next greater element to the right. If no such element exists, output -1.","difficulty":"MEDIUM","tags":["stack","arrays","monotonic stack"],"userId":"9fdc7434-0d78-4c5a-971d-aa0b30ae33c6","examples":{"PYTHON":{"input":"4\n1 3 2 4","output":"3 4 4 -1","explanation":"For 1 → 3, 3 → 4, 2 → 4, 4 → -1."},"JAVASCRIPT":{"input":"5\n6 8 0 1 3","output":"8 -1 1 3 -1","explanation":"For 6 → 8, 8 → -1, 0 → 1, 1 → 3, 3 → -1."}},"constraints":"1 ≤ n ≤ 10^5\n-10^9 ≤ arr[i] ≤ 10^9","hint":null,"editorial":null,"testCases":[{"input":"6\n1 2 1 3 0 4","output":"2 3 3 4 4 -1"},{"input":"3\n5 4 3","output":"-1 -1 -1"}],"createdAt":"2025-06-07 15:20:29.589","updatedAt":"2025-06-07 15:20:29.589","codeSnippets":{"JAVA":"import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) arr[i] = sc.nextInt();\n        int[] res = new int[n];\n        Stack<Integer> stack = new Stack<>();\n        for (int i = n - 1; i >= 0; i--) {\n            while (!stack.isEmpty() && stack.peek() <= arr[i]) stack.pop();\n            res[i] = stack.isEmpty() ? -1 : stack.peek();\n            stack.push(arr[i]);\n        }\n        for (int num : res) System.out.print(num + \" \");\n    }\n}","PYTHON":"def next_greater(arr):\n    stack = []\n    result = [-1] * len(arr)\n    for i in range(len(arr) - 1, -1, -1):\n        while stack and stack[-1] <= arr[i]:\n            stack.pop()\n        if stack:\n            result[i] = stack[-1]\n        stack.append(arr[i])\n    return result\n\nn = int(input())\narr = list(map(int, input().split()))\nprint(*next_greater(arr))","JAVASCRIPT":"function nextGreater(arr) {\n    const res = Array(arr.length).fill(-1);\n    const stack = [];\n    for (let i = arr.length - 1; i >= 0; i--) {\n        while (stack.length && stack[stack.length - 1] <= arr[i]) {\n            stack.pop();\n        }\n        if (stack.length) res[i] = stack[stack.length - 1];\n        stack.push(arr[i]);\n    }\n    return res;\n}\n\nconst fs = require('fs');\nconst input = fs.readFileSync(0, 'utf-8').trim().split('\\n');\nconst arr = input[1].split(' ').map(Number);\nconsole.log(nextGreater(arr).join(' '));"},"referenceSolutions":{"JAVA":"import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) arr[i] = sc.nextInt();\n        int[] res = new int[n];\n        Stack<Integer> stack = new Stack<>();\n        for (int i = n - 1; i >= 0; i--) {\n            while (!stack.isEmpty() && stack.peek() <= arr[i]) stack.pop();\n            res[i] = stack.isEmpty() ? -1 : stack.peek();\n            stack.push(arr[i]);\n        }\n        for (int x : res) System.out.print(x + \" \");\n    }\n}","PYTHON":"n = int(input())\narr = list(map(int, input().split()))\nres = [-1] * n\nstack = []\nfor i in range(n - 1, -1, -1):\n    while stack and stack[-1] <= arr[i]:\n        stack.pop()\n    if stack:\n        res[i] = stack[-1]\n    stack.append(arr[i])\nprint(*res)","JAVASCRIPT":"const fs = require('fs');\nconst input = fs.readFileSync(0, 'utf-8').trim().split('\\n');\nconst arr = input[1].split(' ').map(Number);\nlet res = Array(arr.length).fill(-1);\nlet stack = [];\nfor (let i = arr.length - 1; i >= 0; i--) {\n    while (stack.length && stack[stack.length - 1] <= arr[i]) stack.pop();\n    if (stack.length) res[i] = stack[stack.length - 1];\n    stack.push(arr[i]);\n}\nconsole.log(res.join(' '));"}}]